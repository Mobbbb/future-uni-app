"use strict";const e=require("../../request.api/index.js"),t=require("../../utils/umob.js"),r={namespaced:!0,state:()=>({orderList:[],openingOrderList:[],openingOrderGroup:{},futureConfigInfo:[],futureDayShareInfo:[],futureDayLineInfo:[],dataFutureBreed:"eb"}),getters:{futuresList:e=>e.futureConfigInfo.filter((e=>e.name===e.activeName)),closeSettingfuturesList:e=>e.futureConfigInfo.filter((e=>e.canCloseInDay)),enFutureNameMap(e){const t={};return e.futureConfigInfo.forEach((e=>{t[e.name]=e.chName})),t},enFutureMap(e){const t={};return e.futureConfigInfo.forEach((e=>{t[e.name]=e})),t}},mutations:{setDataFutureBreed(e,t){e.dataFutureBreed=t},setFutureDayShareInfo(e,t){e.futureDayShareInfo=t},setFutureConfigInfo(e,t){e.futureConfigInfo=t},setOrderList(e,t){e.orderList=t},setOpeningOrderList(e,t){e.openingOrderList=t},setOpeningOrderGroup(e,t){e.openingOrderGroup=t},setFutureDayLineInfo(e,t){e.futureDayLineInfo=t}},actions:{async getOrderData({commit:t},r){const n=await e.fetchOrderInfoHandle(r);return t("setOrderList",n.result),n},async getFutureConfigInfo({commit:t}){t("setFutureConfigInfo",(await e.fetchFutureConfigInfo()).data||[])},async getFutureDayShareInfo({commit:t},r){t("setFutureDayShareInfo",(await e.fetchFutureDayShareInfo(r)).data||[])},async getFutureDayLineInfo({commit:r},n){const a=(await e.fetchFutureDayLineInfo(n)).data||[];a.sort(t.sortCallback({key:"date",type:"asc"})),r("setFutureDayLineInfo",a)},async getOpeningOrderData({commit:t}){const r=(await e.fetchOpeningOrderInfo()).data||[],n=[],a={};r.forEach((e=>{a[`${e.name}${e.buyOrSale}`]||(a[`${e.name}${e.buyOrSale}`]=[]),a[`${e.name}${e.buyOrSale}`].push(e)})),Object.keys(a).forEach((e=>{const t={...a[e][0]};let r=0,o=0,u=0;a[e].forEach((e=>{const{closeHands:t=0,hands:n,price:a,commission:s}=e;r+=n,r-=t,o+=(n-t)*a,u+=(n-t)*(s/n)})),t.price=(o/r).toFixed(3),t.hands=r,t.commission=u.toFixed(2),n.push(t)})),t("setOpeningOrderGroup",a),t("setOpeningOrderList",n)}}};exports.order=r;
